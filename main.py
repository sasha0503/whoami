from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from typing import List

import logging

from whoami_player import session, Player

API_TOKEN = "5566294805:AAHBm87FAti2DnpcxBG6VsSuqbBSRzHrn1M"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

join_button = KeyboardButton("–ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –∑–∞ –∫–æ–¥–æ–º")
create_button = KeyboardButton("—Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É")
stop_button = KeyboardButton("–∑—É–ø–∏–Ω–∏—Ç–∏")
start_button = KeyboardButton("–ø–æ—á–∞—Ç–∏ –≥—Ä—É üöÄ")
name_button = KeyboardButton("–ø–æ–±–∞—á–∏—Ç–∏ —Ö—Ç–æ —è üëÄ")

inactive_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(join_button, create_button)
pregame_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(start_button, stop_button)
ingame_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(name_button, stop_button)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.full_name
    q = session.query(Player).filter(Player.id == user_id)
    if not session.query(q.exists()).scalar():
        new_player = Player(user_id, username)
        session.add(new_player)
        session.commit()
    await message.answer("–¥–æ–±—Ä–∏–π –¥–µ–Ω—å!", reply_markup=inactive_keyboard)


@dp.message_handler(lambda message: message.text == "–ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –∑–∞ –∫–æ–¥–æ–º")
async def join(message: types.Message):
    user_id = message.from_id
    user: Player = session.query(Player).filter(Player.id == user_id).first()
    if user.status == user.INACTIVE:
        if current_game.is_on:
            user.status = Player.WAITING
            answer = current_game.create_list(user.status, user_id)
            list_message = await message.answer(f"—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{answer}", reply_markup=ReplyKeyboardRemove())
            user.list_id = list_message.message_id
            session.commit()
            current_game.players.append(user_id)
            await message.answer("–≤–∏–±–∞—á, –¥—Ä—É–∂–µ, –≥—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è", reply_markup=ReplyKeyboardRemove())
        else:
            user.status = Player.PREGAME
            session.commit()
            current_game.players.append(user_id)
            answer = current_game.create_list(user.status, user_id)
            for id in current_game.players:
                player = session.query(Player).filter(Player.id == id).first()
                if id == user_id or not player.list_id:
                    list_message = await bot.send_message(player.id, f"—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{answer}")
                    player.list_id = list_message.message_id
                else:
                    await bot.edit_message_text(f"—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{answer}", player.id, player.list_id)
            await message.answer("–ø–æ—á–Ω—ñ—Ç—å –≥—Ä—É, –∫–æ–ª–∏ –≤—Å—ñ –ø—Ä–∏—î–¥–Ω–∞—é—Ç—å—Å—è", reply_markup=pregame_keyboard)
    else:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)


@dp.message_handler(lambda message: message.text == "–∑—É–ø–∏–Ω–∏—Ç–∏")
async def cancel_game(message: types.Message):
    user_id = message.from_id
    user: Player = session.query(Player).filter(Player.id == user_id).first()
    if user.status == Player.WAITING or user.status == Player.INACTIVE:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)
    else:
        players: List[Player] = session.query(Player).filter(Player.id.in_(current_game.players))
        for player in players:
            player.status = Player.INACTIVE
            player.secret_name = ""
            player.replay_id = 0
            current_game.is_on = False
            current_game.players = []
            await bot.send_message(player.id, "–≥—Ä–∞ –∑—É–ø–∏–Ω–µ–Ω–∞", reply_markup=inactive_keyboard)
        session.commit()
        current_game.players = []
        current_game.is_on = False


@dp.message_handler(lambda message: message.text == "–ø–æ—á–∞—Ç–∏ –≥—Ä—É üöÄ")
async def start_game(message: types.Message):
    user_id = message.from_id
    user: Player = session.query(Player).filter(Player.id == user_id).first()
    if user.status == Player.PREGAME:
        if not current_game.is_on:
            players: List[Player] = session.query(Player).filter(Player.id.in_(current_game.players))
            for j, player in enumerate(players):
                player.status = Player.INGAME
                await bot.delete_message(player.id, player.list_id)
                player.list_id = 0
                await bot.send_message(player.id, "–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É!")
                fellow = players[j - 1]
                replay_message = await bot.send_message(player.id,
                                                        f"–∑–∞–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–±–æ –æ—Å–æ–±—É –¥–ª—è _{fellow.username}_ "
                                                        f"—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", parse_mode="Markdown",
                                                        reply_markup=ReplyKeyboardRemove())
                fellow.replay_id = replay_message.message_id
            session.commit()
            current_game.is_on = True
    else:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)


@dp.message_handler(lambda message: message.text == "–ø–æ–±–∞—á–∏—Ç–∏ —Ö—Ç–æ —è üëÄ")
async def get_name(message: types.Message):
    user_id = message.from_id
    user: Player = session.query(Player).filter(Player.id == user_id).first()
    if user.status == user.INGAME:
        user.status = Player.WAITING
        session.commit()
        players: List[Player] = session.query(Player).filter(Player.id.in_(current_game.players))
        end_of_game = all(player.status == Player.WAITING for player in players)
        for player in players:
            answer = current_game.create_list(player.status, player.id)
            await bot.edit_message_text(f"—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{answer}", chat_id=player.id, message_id=player.list_id)
            if end_of_game:
                await bot.send_message(player.id, "_the end!_", parse_mode='Markdown', reply_markup=inactive_keyboard)
                player.status = Player.INACTIVE
                player.secret_name = ""
                player.replay_id = 0
                current_game.is_on = False
                current_game.players = []
    else:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)


@dp.message_handler()
async def assign_name(message: types.Message):
    user_id = message.from_id
    user: Player = session.query(Player).filter(Player.id == user_id).first()
    if message.reply_to_message is None:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)
        return
    replay_id = message.reply_to_message.message_id
    q = session.query(Player).filter(Player.replay_id == replay_id)
    if session.query(q.exists()).scalar() and user.status == Player.INGAME and current_game.is_on:
        fellow: Player = q.first()
        fellow.secret_name = message.text
        session.commit()
        players: List[Player] = session.query(Player).filter(Player.id.in_(current_game.players))
        if all(player.secret_name != "" for player in players):
            for player in players:
                await bot.send_message(player.id, "–ø–æ—á–∏–Ω–∞—î–º–æ!", reply_markup=ingame_keyboard)
                answer = current_game.create_list(player.status, player.id)
                list_message = await bot.send_message(player.id, f"—Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{answer}")
                player.list_id = list_message.message_id
            session.commit()
        else:
            await message.answer("–≤—Å—å–æ —Å—É–ø–µ—Ä, –∑–∞—á–µ–∫–∞–π —ñ–Ω—à–∏—Ö", reply_markup=ingame_keyboard)
    else:
        await message.answer("–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É", reply_markup=message.reply_markup)


class Game:
    is_on: bool = False
    players: List[int] = []

    def __init__(self):
        self.is_on = False

    def create_list(self, status, exclude_id):
        answer = ""
        players: List[Player] = session.query(Player).filter(Player.id.in_(self.players))
        if status == Player.INGAME:
            for player in players:
                if player.id != exclude_id:
                    answer += f"$ {player.username} -- {player.secret_name}"
                    answer += " ‚úÖ\n" if player.status == Player.WAITING else "\n"
        elif status == Player.PREGAME:
            for player in players:
                answer += f"{player.username}\n"
        elif status == Player.WAITING:
            for player in players:
                answer += f"{player.username} -- {player.secret_name}"
                answer += " ‚úÖ\n" if player.status == Player.WAITING else "\n"
        elif status == Player.INACTIVE:
            answer += f"–Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ—è–Ω—Ç—É"
        if answer == "":
            answer = "—Ç–∏ —Ç—É—Ç —Å–∞–º"
        return answer


if __name__ == "__main__":
    for p in session.query(Player).all():
        p.status = Player.INACTIVE
        p.secret_name = ""
    session.commit()
    current_game = Game()
    executor.start_polling(dp, skip_updates=True)
